<?php

/**
 * Dp
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    dp-navigator
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Dp extends BaseDp
{
  /* Manage the string to make appear links */
  public static function pretty($string, $internalLink = false) {
    //Replace structures as such [[http://google.com]] by <a href="google.com">google.com</a>
	$out = preg_replace('#(\[\[\ *(http://.*?)\ *\]\])#i', '<a href="$2" target="_blank">$2 <span title="External link">&#x219D;</span></a>', $string);

    //Replace structures as such [[patterName|2]] by <a href="dp/view/id/2">patternName</a>
	if($internalLink) {
	  $out = preg_replace('#(\[\[\ *([^\]]*?)\|(\d+)\ *\]\])#i', '<a href="#$3" class="patternName">$2</a>', $out);
	} else {
	  $out = preg_replace('#(\[\[\ *([^\]]*?)\|(\d+)\ *\]\])#i', '<a href="$3" class="patternName">$2</a>', $out);
	}

    //Replace structures as such [[linkName|http://google.com]] by <a href="http://google.com">linkName</a>
	$out = preg_replace('#(\[\[\ *([^\]]*?)\|(http://.*?)\ *\]\])#i', '<a href="$3" target="_blank">$2 <span title="External link">&#x219D;</span></a>', $out);

	/* The following structure is related to Serious Game's domain.
	   Make this structure more generic in next versions.*/
	//Replace structures like [[758-Americas-Army]] by <a href="http://serious.gameclassification.com/EN/games/758-Americas-Army/index.html">Americas Army</a>
	$out = preg_replace('#(\[\[\ *(\d*-(.*?))\ *\]\])#i', '<a href="http://serious.gameclassification.com/EN/games/$2/index.html" target="_blank">$3 <span title="External link to GameClassification.com">&#x219D;</span></a>', $out);


	//Replace structures as such [[patternname]] by <span class="patternName">patternname</span>
	//(Let this line in last case)
	$out = preg_replace('#(\[\[\ *(.*?)\ *\]\])#i', '<span class="patternName">$2</span>', $out);

	// Transform break line into <br/>
	$out = nl2br($out);

	return $out;
  }


  /* Return children (according to relation 1 (inclusion)) of this Dp (optionnaly belonging to a category)*/
  public function getChildren($category) {
    $q = Doctrine_Query::create()
	->select('d.*')
	->from('Dp d, DpRelation dr, DpCategory dc')
	->where('dr.source_id=?', $this->getId())      // look for children (according to relation of type 1 (inclusion) )
	->andWhere('dr.target_id=d.id')
	->andWhere('dr.type_id=?', 1)
	->andWhere('d.id=dc.dp_id')          // ... in this category
	->andWhere('dc.category_id=?', $category->getId());

	return $q->execute();
  }
}